/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BusinessObjects
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExpertParameter : TBase
  {
    private EnumExpertValueType _ValueType;
    private EnumExpertValueScope _Scope;
    private long _ScopeID;
    private string _Name;

    /// <summary>
    /// 
    /// <seealso cref="EnumExpertValueType"/>
    /// </summary>
    public EnumExpertValueType ValueType
    {
      get
      {
        return _ValueType;
      }
      set
      {
        __isset.ValueType = true;
        this._ValueType = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="EnumExpertValueScope"/>
    /// </summary>
    public EnumExpertValueScope Scope
    {
      get
      {
        return _Scope;
      }
      set
      {
        __isset.Scope = true;
        this._Scope = value;
      }
    }

    public long ScopeID
    {
      get
      {
        return _ScopeID;
      }
      set
      {
        __isset.ScopeID = true;
        this._ScopeID = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ValueType;
      public bool Scope;
      public bool ScopeID;
      public bool Name;
    }

    public ExpertParameter() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ValueType = (EnumExpertValueType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Scope = (EnumExpertValueScope)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ScopeID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ExpertParameter");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ValueType) {
          field.Name = "ValueType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ValueType);
          oprot.WriteFieldEnd();
        }
        if (__isset.Scope) {
          field.Name = "Scope";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Scope);
          oprot.WriteFieldEnd();
        }
        if (__isset.ScopeID) {
          field.Name = "ScopeID";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ScopeID);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ExpertParameter(");
      bool __first = true;
      if (__isset.ValueType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ValueType: ");
        __sb.Append(ValueType);
      }
      if (__isset.Scope) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scope: ");
        __sb.Append(Scope);
      }
      if (__isset.ScopeID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ScopeID: ");
        __sb.Append(ScopeID);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
