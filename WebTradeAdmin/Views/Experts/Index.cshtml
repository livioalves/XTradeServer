@using BusinessObjects

@{
    ViewBag.Title = "Home";
}

<h2>Experts</h2>
<script>

    function toolbar_preparing(e) {
        //var dataGrid = e.component;
        e.toolbarOptions.items.unshift({
            location: "after",
            widget: "dxButton",
            options: {
                text: "Generate Deploy Scripts",
                width: 200,
                onClick: function (e)
                {
                    var url = '@Url.Action("GenerateDeployScript", "Experts")';
                    window.location = url;
                }
            }
        });
    }

    function onClickDeploy(e) {
        //alert(e.columnIndex);
        if (e.columnIndex != 4)
            return;
        if (e.data.Disabled) {
            alert('Deploy enabled only for Enabled accounts! Exiting.');
            return;
        }
        var url = '@Url.Action("Deploy", "Experts")';
        url += "?id=" + e.data.ID;
        console.log(url);
        window.location = url;
    }

</script>

@(Html.DevExtreme().DataGrid<Account>()
            .ID("ID")
            .ShowBorders(true)
            .DataSource(d => d.WebApi()
                .Controller("AccountApi")
                .Key("ID")
            )
            .LoadPanel(p => p.Enabled(true))
            .OnToolbarPreparing("toolbar_preparing")
            .OnCellClick("onClickDeploy")
            .Columns(columns =>
            {
                columns.AddFor(m => m.AccountNumber);
                columns.AddFor(m => m.Broker);
                columns.AddFor(m => m.Disabled).SortIndex(0).SortOrder(SortOrder.Asc);
                columns.Add().Width(160).Caption("Commands").Alignment(HorizontalAlignment.Center)
                .CellTemplate(@<text>
                    @Html.DevExtreme().Button().Text("Deploy")
                </text>);
                    })
            .MasterDetail(md =>
            {
                md.Enabled(true);
                md.Template(@<text>

                    @(Html.DevExtreme().DataGrid<Adviser>()
                                .ColumnAutoWidth(true)
                                .ShowBorders(true)
                                .Columns(columns =>
                                {
                                        columns.AddFor(m => m.Name);
                                        columns.AddFor(m => m.Symbol);
                                        columns.AddFor(m => m.Timeframe);
                                        columns.AddFor(m => m.LastUpdate).Format(Format.ShortDateShortTime);
                                        columns.AddFor(m => m.CloseReason);
                                        columns.AddFor(m => m.Running);
                                        columns.AddFor(m => m.Disabled).SortIndex(0).SortOrder(SortOrder.Asc);
                                    })
                        .DataSource(d => d.WebApi()
                            .Controller("ExpertsApi")
                            .LoadParams(new { id = new JS("data.ID") })
                        )
                    )
                </text>);
                    })
)