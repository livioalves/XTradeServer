/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BusinessObjects
{
  public partial class FXMindMQL {
    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface ISync {
      List<string> ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData);
      List<double> ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData);
      long IsServerActive(Dictionary<string, string> paramsList);
      void PostStatusMessage(Dictionary<string, string> paramsList);
      string GetGlobalProperty(string propName);
      ExpertInfo InitExpert(ExpertInfo expert);
      void SaveExpert(long MagicNumber, string ActiveOrdersList);
      void DeInitExpert(int Reason, long MagicNumber);
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData);
      List<string> End_ProcessStringData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData);
      List<double> End_ProcessDoubleData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList);
      long End_IsServerActive(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList);
      void End_PostStatusMessage(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetGlobalProperty(AsyncCallback callback, object state, string propName);
      string End_GetGlobalProperty(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_InitExpert(AsyncCallback callback, object state, ExpertInfo expert);
      ExpertInfo End_InitExpert(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SaveExpert(AsyncCallback callback, object state, long MagicNumber, string ActiveOrdersList);
      void End_SaveExpert(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DeInitExpert(AsyncCallback callback, object state, int Reason, long MagicNumber);
      void End_DeInitExpert(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      {
        return send_ProcessStringData(callback, state, paramsList, inputData);
      }

      public List<string> End_ProcessStringData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ProcessStringData();
      }

      #endif

      public List<string> ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData)
      {
        #if !SILVERLIGHT
        send_ProcessStringData(paramsList, inputData);
        return recv_ProcessStringData();

        #else
        var asyncResult = Begin_ProcessStringData(null, null, paramsList, inputData);
        return End_ProcessStringData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      #else
      public void send_ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ProcessStringData", TMessageType.Call, seqid_));
        ProcessStringData_args args = new ProcessStringData_args();
        args.ParamsList = paramsList;
        args.InputData = inputData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_ProcessStringData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ProcessStringData_result result = new ProcessStringData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ProcessStringData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      {
        return send_ProcessDoubleData(callback, state, paramsList, inputData);
      }

      public List<double> End_ProcessDoubleData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ProcessDoubleData();
      }

      #endif

      public List<double> ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData)
      {
        #if !SILVERLIGHT
        send_ProcessDoubleData(paramsList, inputData);
        return recv_ProcessDoubleData();

        #else
        var asyncResult = Begin_ProcessDoubleData(null, null, paramsList, inputData);
        return End_ProcessDoubleData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      #else
      public void send_ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ProcessDoubleData", TMessageType.Call, seqid_));
        ProcessDoubleData_args args = new ProcessDoubleData_args();
        args.ParamsList = paramsList;
        args.InputData = inputData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<double> recv_ProcessDoubleData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ProcessDoubleData_result result = new ProcessDoubleData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ProcessDoubleData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      {
        return send_IsServerActive(callback, state, paramsList);
      }

      public long End_IsServerActive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_IsServerActive();
      }

      #endif

      public long IsServerActive(Dictionary<string, string> paramsList)
      {
        #if !SILVERLIGHT
        send_IsServerActive(paramsList);
        return recv_IsServerActive();

        #else
        var asyncResult = Begin_IsServerActive(null, null, paramsList);
        return End_IsServerActive(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      #else
      public void send_IsServerActive(Dictionary<string, string> paramsList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("IsServerActive", TMessageType.Call, seqid_));
        IsServerActive_args args = new IsServerActive_args();
        args.ParamsList = paramsList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_IsServerActive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsServerActive_result result = new IsServerActive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsServerActive failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      {
        return send_PostStatusMessage(callback, state, paramsList);
      }

      public void End_PostStatusMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void PostStatusMessage(Dictionary<string, string> paramsList)
      {
        #if !SILVERLIGHT
        send_PostStatusMessage(paramsList);

        #else
        var asyncResult = Begin_PostStatusMessage(null, null, paramsList);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      #else
      public void send_PostStatusMessage(Dictionary<string, string> paramsList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PostStatusMessage", TMessageType.Oneway, seqid_));
        PostStatusMessage_args args = new PostStatusMessage_args();
        args.ParamsList = paramsList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGlobalProperty(AsyncCallback callback, object state, string propName)
      {
        return send_GetGlobalProperty(callback, state, propName);
      }

      public string End_GetGlobalProperty(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGlobalProperty();
      }

      #endif

      public string GetGlobalProperty(string propName)
      {
        #if !SILVERLIGHT
        send_GetGlobalProperty(propName);
        return recv_GetGlobalProperty();

        #else
        var asyncResult = Begin_GetGlobalProperty(null, null, propName);
        return End_GetGlobalProperty(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGlobalProperty(AsyncCallback callback, object state, string propName)
      #else
      public void send_GetGlobalProperty(string propName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGlobalProperty", TMessageType.Call, seqid_));
        GetGlobalProperty_args args = new GetGlobalProperty_args();
        args.PropName = propName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetGlobalProperty()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGlobalProperty_result result = new GetGlobalProperty_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGlobalProperty failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_InitExpert(AsyncCallback callback, object state, ExpertInfo expert)
      {
        return send_InitExpert(callback, state, expert);
      }

      public ExpertInfo End_InitExpert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_InitExpert();
      }

      #endif

      public ExpertInfo InitExpert(ExpertInfo expert)
      {
        #if !SILVERLIGHT
        send_InitExpert(expert);
        return recv_InitExpert();

        #else
        var asyncResult = Begin_InitExpert(null, null, expert);
        return End_InitExpert(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InitExpert(AsyncCallback callback, object state, ExpertInfo expert)
      #else
      public void send_InitExpert(ExpertInfo expert)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InitExpert", TMessageType.Call, seqid_));
        InitExpert_args args = new InitExpert_args();
        args.Expert = expert;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ExpertInfo recv_InitExpert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InitExpert_result result = new InitExpert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InitExpert failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SaveExpert(AsyncCallback callback, object state, long MagicNumber, string ActiveOrdersList)
      {
        return send_SaveExpert(callback, state, MagicNumber, ActiveOrdersList);
      }

      public void End_SaveExpert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void SaveExpert(long MagicNumber, string ActiveOrdersList)
      {
        #if !SILVERLIGHT
        send_SaveExpert(MagicNumber, ActiveOrdersList);

        #else
        var asyncResult = Begin_SaveExpert(null, null, MagicNumber, ActiveOrdersList);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SaveExpert(AsyncCallback callback, object state, long MagicNumber, string ActiveOrdersList)
      #else
      public void send_SaveExpert(long MagicNumber, string ActiveOrdersList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SaveExpert", TMessageType.Oneway, seqid_));
        SaveExpert_args args = new SaveExpert_args();
        args.MagicNumber = MagicNumber;
        args.ActiveOrdersList = ActiveOrdersList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeInitExpert(AsyncCallback callback, object state, int Reason, long MagicNumber)
      {
        return send_DeInitExpert(callback, state, Reason, MagicNumber);
      }

      public void End_DeInitExpert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void DeInitExpert(int Reason, long MagicNumber)
      {
        #if !SILVERLIGHT
        send_DeInitExpert(Reason, MagicNumber);

        #else
        var asyncResult = Begin_DeInitExpert(null, null, Reason, MagicNumber);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeInitExpert(AsyncCallback callback, object state, int Reason, long MagicNumber)
      #else
      public void send_DeInitExpert(int Reason, long MagicNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeInitExpert", TMessageType.Oneway, seqid_));
        DeInitExpert_args args = new DeInitExpert_args();
        args.Reason = Reason;
        args.MagicNumber = MagicNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["ProcessStringData"] = ProcessStringData_Process;
        processMap_["ProcessDoubleData"] = ProcessDoubleData_Process;
        processMap_["IsServerActive"] = IsServerActive_Process;
        processMap_["PostStatusMessage"] = PostStatusMessage_Process;
        processMap_["GetGlobalProperty"] = GetGlobalProperty_Process;
        processMap_["InitExpert"] = InitExpert_Process;
        processMap_["SaveExpert"] = SaveExpert_Process;
        processMap_["DeInitExpert"] = DeInitExpert_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ProcessStringData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ProcessStringData_args args = new ProcessStringData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ProcessStringData_result result = new ProcessStringData_result();
        try
        {
          result.Success = iface_.ProcessStringData(args.ParamsList, args.InputData);
          oprot.WriteMessageBegin(new TMessage("ProcessStringData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ProcessStringData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ProcessDoubleData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ProcessDoubleData_args args = new ProcessDoubleData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ProcessDoubleData_result result = new ProcessDoubleData_result();
        try
        {
          result.Success = iface_.ProcessDoubleData(args.ParamsList, args.InputData);
          oprot.WriteMessageBegin(new TMessage("ProcessDoubleData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ProcessDoubleData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsServerActive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsServerActive_args args = new IsServerActive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsServerActive_result result = new IsServerActive_result();
        try
        {
          result.Success = iface_.IsServerActive(args.ParamsList);
          oprot.WriteMessageBegin(new TMessage("IsServerActive", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("IsServerActive", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PostStatusMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PostStatusMessage_args args = new PostStatusMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          iface_.PostStatusMessage(args.ParamsList);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

      public void GetGlobalProperty_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGlobalProperty_args args = new GetGlobalProperty_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGlobalProperty_result result = new GetGlobalProperty_result();
        try
        {
          result.Success = iface_.GetGlobalProperty(args.PropName);
          oprot.WriteMessageBegin(new TMessage("GetGlobalProperty", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGlobalProperty", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void InitExpert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InitExpert_args args = new InitExpert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InitExpert_result result = new InitExpert_result();
        try
        {
          result.Success = iface_.InitExpert(args.Expert);
          oprot.WriteMessageBegin(new TMessage("InitExpert", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InitExpert", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SaveExpert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SaveExpert_args args = new SaveExpert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          iface_.SaveExpert(args.MagicNumber, args.ActiveOrdersList);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

      public void DeInitExpert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeInitExpert_args args = new DeInitExpert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        try
        {
          iface_.DeInitExpert(args.Reason, args.MagicNumber);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
        }
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessStringData_args : TBase
    {
      private Dictionary<string, string> _paramsList;
      private List<string> _inputData;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }

      public List<string> InputData
      {
        get
        {
          return _inputData;
        }
        set
        {
          __isset.inputData = true;
          this._inputData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
        public bool inputData;
      }

      public ProcessStringData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    ParamsList = new Dictionary<string, string>();
                    TMap _map8 = iprot.ReadMapBegin();
                    for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                    {
                      string _key10;
                      string _val11;
                      _key10 = iprot.ReadString();
                      _val11 = iprot.ReadString();
                      ParamsList[_key10] = _val11;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    InputData = new List<string>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      string _elem14;
                      _elem14 = iprot.ReadString();
                      InputData.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ProcessStringData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ParamsList != null && __isset.paramsList) {
            field.Name = "paramsList";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
              foreach (string _iter15 in ParamsList.Keys)
              {
                oprot.WriteString(_iter15);
                oprot.WriteString(ParamsList[_iter15]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (InputData != null && __isset.inputData) {
            field.Name = "inputData";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, InputData.Count));
              foreach (string _iter16 in InputData)
              {
                oprot.WriteString(_iter16);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessStringData_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        if (InputData != null && __isset.inputData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InputData: ");
          __sb.Append(InputData);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessStringData_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ProcessStringData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list17 = iprot.ReadListBegin();
                    for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                    {
                      string _elem19;
                      _elem19 = iprot.ReadString();
                      Success.Add(_elem19);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ProcessStringData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter20 in Success)
                {
                  oprot.WriteString(_iter20);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessStringData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessDoubleData_args : TBase
    {
      private Dictionary<string, string> _paramsList;
      private List<string> _inputData;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }

      public List<string> InputData
      {
        get
        {
          return _inputData;
        }
        set
        {
          __isset.inputData = true;
          this._inputData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
        public bool inputData;
      }

      public ProcessDoubleData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    ParamsList = new Dictionary<string, string>();
                    TMap _map21 = iprot.ReadMapBegin();
                    for( int _i22 = 0; _i22 < _map21.Count; ++_i22)
                    {
                      string _key23;
                      string _val24;
                      _key23 = iprot.ReadString();
                      _val24 = iprot.ReadString();
                      ParamsList[_key23] = _val24;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    InputData = new List<string>();
                    TList _list25 = iprot.ReadListBegin();
                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)
                    {
                      string _elem27;
                      _elem27 = iprot.ReadString();
                      InputData.Add(_elem27);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ProcessDoubleData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ParamsList != null && __isset.paramsList) {
            field.Name = "paramsList";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
              foreach (string _iter28 in ParamsList.Keys)
              {
                oprot.WriteString(_iter28);
                oprot.WriteString(ParamsList[_iter28]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (InputData != null && __isset.inputData) {
            field.Name = "inputData";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, InputData.Count));
              foreach (string _iter29 in InputData)
              {
                oprot.WriteString(_iter29);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessDoubleData_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        if (InputData != null && __isset.inputData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InputData: ");
          __sb.Append(InputData);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessDoubleData_result : TBase
    {
      private List<double> _success;

      public List<double> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ProcessDoubleData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<double>();
                    TList _list30 = iprot.ReadListBegin();
                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                    {
                      double _elem32;
                      _elem32 = iprot.ReadDouble();
                      Success.Add(_elem32);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ProcessDoubleData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Double, Success.Count));
                foreach (double _iter33 in Success)
                {
                  oprot.WriteDouble(_iter33);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessDoubleData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsServerActive_args : TBase
    {
      private Dictionary<string, string> _paramsList;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
      }

      public IsServerActive_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    ParamsList = new Dictionary<string, string>();
                    TMap _map34 = iprot.ReadMapBegin();
                    for( int _i35 = 0; _i35 < _map34.Count; ++_i35)
                    {
                      string _key36;
                      string _val37;
                      _key36 = iprot.ReadString();
                      _val37 = iprot.ReadString();
                      ParamsList[_key36] = _val37;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IsServerActive_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ParamsList != null && __isset.paramsList) {
            field.Name = "paramsList";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
              foreach (string _iter38 in ParamsList.Keys)
              {
                oprot.WriteString(_iter38);
                oprot.WriteString(ParamsList[_iter38]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsServerActive_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsServerActive_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public IsServerActive_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("IsServerActive_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsServerActive_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PostStatusMessage_args : TBase
    {
      private Dictionary<string, string> _paramsList;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
      }

      public PostStatusMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    ParamsList = new Dictionary<string, string>();
                    TMap _map39 = iprot.ReadMapBegin();
                    for( int _i40 = 0; _i40 < _map39.Count; ++_i40)
                    {
                      string _key41;
                      string _val42;
                      _key41 = iprot.ReadString();
                      _val42 = iprot.ReadString();
                      ParamsList[_key41] = _val42;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PostStatusMessage_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ParamsList != null && __isset.paramsList) {
            field.Name = "paramsList";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
              foreach (string _iter43 in ParamsList.Keys)
              {
                oprot.WriteString(_iter43);
                oprot.WriteString(ParamsList[_iter43]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PostStatusMessage_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalProperty_args : TBase
    {
      private string _propName;

      public string PropName
      {
        get
        {
          return _propName;
        }
        set
        {
          __isset.propName = true;
          this._propName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool propName;
      }

      public GetGlobalProperty_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  PropName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalProperty_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PropName != null && __isset.propName) {
            field.Name = "propName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(PropName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalProperty_args(");
        bool __first = true;
        if (PropName != null && __isset.propName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PropName: ");
          __sb.Append(PropName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalProperty_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGlobalProperty_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalProperty_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalProperty_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InitExpert_args : TBase
    {
      private ExpertInfo _expert;

      public ExpertInfo Expert
      {
        get
        {
          return _expert;
        }
        set
        {
          __isset.expert = true;
          this._expert = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expert;
      }

      public InitExpert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Expert = new ExpertInfo();
                  Expert.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InitExpert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Expert != null && __isset.expert) {
            field.Name = "expert";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Expert.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InitExpert_args(");
        bool __first = true;
        if (Expert != null && __isset.expert) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Expert: ");
          __sb.Append(Expert== null ? "<null>" : Expert.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InitExpert_result : TBase
    {
      private ExpertInfo _success;

      public ExpertInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public InitExpert_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ExpertInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InitExpert_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InitExpert_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SaveExpert_args : TBase
    {
      private long _MagicNumber;
      private string _ActiveOrdersList;

      public long MagicNumber
      {
        get
        {
          return _MagicNumber;
        }
        set
        {
          __isset.MagicNumber = true;
          this._MagicNumber = value;
        }
      }

      public string ActiveOrdersList
      {
        get
        {
          return _ActiveOrdersList;
        }
        set
        {
          __isset.ActiveOrdersList = true;
          this._ActiveOrdersList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool MagicNumber;
        public bool ActiveOrdersList;
      }

      public SaveExpert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  MagicNumber = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ActiveOrdersList = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SaveExpert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.MagicNumber) {
            field.Name = "MagicNumber";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(MagicNumber);
            oprot.WriteFieldEnd();
          }
          if (ActiveOrdersList != null && __isset.ActiveOrdersList) {
            field.Name = "ActiveOrdersList";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ActiveOrdersList);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SaveExpert_args(");
        bool __first = true;
        if (__isset.MagicNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MagicNumber: ");
          __sb.Append(MagicNumber);
        }
        if (ActiveOrdersList != null && __isset.ActiveOrdersList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ActiveOrdersList: ");
          __sb.Append(ActiveOrdersList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DeInitExpert_args : TBase
    {
      private int _Reason;
      private long _MagicNumber;

      public int Reason
      {
        get
        {
          return _Reason;
        }
        set
        {
          __isset.Reason = true;
          this._Reason = value;
        }
      }

      public long MagicNumber
      {
        get
        {
          return _MagicNumber;
        }
        set
        {
          __isset.MagicNumber = true;
          this._MagicNumber = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Reason;
        public bool MagicNumber;
      }

      public DeInitExpert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Reason = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  MagicNumber = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DeInitExpert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.Reason) {
            field.Name = "Reason";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Reason);
            oprot.WriteFieldEnd();
          }
          if (__isset.MagicNumber) {
            field.Name = "MagicNumber";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(MagicNumber);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DeInitExpert_args(");
        bool __first = true;
        if (__isset.Reason) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Reason: ");
          __sb.Append(Reason);
        }
        if (__isset.MagicNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MagicNumber: ");
          __sb.Append(MagicNumber);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
