/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BusinessObjects
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Order : TBase
  {
    private long _ticket;
    private sbyte _type;
    private long _magic;
    private double _lots;
    private double _openPrice;
    private double _closePrice;
    private string _openTime;
    private string _closeTime;
    private double _profit;
    private double _swapValue;
    private double _commission;
    private double _stopLoss;
    private double _takeProfit;
    private string _expiration;
    private string _comment;
    private string _symbol;
    private List<ExpertParameter> _parameters;

    public long Ticket
    {
      get
      {
        return _ticket;
      }
      set
      {
        __isset.ticket = true;
        this._ticket = value;
      }
    }

    public sbyte Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public long Magic
    {
      get
      {
        return _magic;
      }
      set
      {
        __isset.magic = true;
        this._magic = value;
      }
    }

    public double Lots
    {
      get
      {
        return _lots;
      }
      set
      {
        __isset.lots = true;
        this._lots = value;
      }
    }

    public double OpenPrice
    {
      get
      {
        return _openPrice;
      }
      set
      {
        __isset.openPrice = true;
        this._openPrice = value;
      }
    }

    public double ClosePrice
    {
      get
      {
        return _closePrice;
      }
      set
      {
        __isset.closePrice = true;
        this._closePrice = value;
      }
    }

    public string OpenTime
    {
      get
      {
        return _openTime;
      }
      set
      {
        __isset.openTime = true;
        this._openTime = value;
      }
    }

    public string CloseTime
    {
      get
      {
        return _closeTime;
      }
      set
      {
        __isset.closeTime = true;
        this._closeTime = value;
      }
    }

    public double Profit
    {
      get
      {
        return _profit;
      }
      set
      {
        __isset.profit = true;
        this._profit = value;
      }
    }

    public double SwapValue
    {
      get
      {
        return _swapValue;
      }
      set
      {
        __isset.swapValue = true;
        this._swapValue = value;
      }
    }

    public double Commission
    {
      get
      {
        return _commission;
      }
      set
      {
        __isset.commission = true;
        this._commission = value;
      }
    }

    public double StopLoss
    {
      get
      {
        return _stopLoss;
      }
      set
      {
        __isset.stopLoss = true;
        this._stopLoss = value;
      }
    }

    public double TakeProfit
    {
      get
      {
        return _takeProfit;
      }
      set
      {
        __isset.takeProfit = true;
        this._takeProfit = value;
      }
    }

    public string Expiration
    {
      get
      {
        return _expiration;
      }
      set
      {
        __isset.expiration = true;
        this._expiration = value;
      }
    }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }

    public string Symbol
    {
      get
      {
        return _symbol;
      }
      set
      {
        __isset.symbol = true;
        this._symbol = value;
      }
    }

    public List<ExpertParameter> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.parameters = true;
        this._parameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticket;
      public bool type;
      public bool magic;
      public bool lots;
      public bool openPrice;
      public bool closePrice;
      public bool openTime;
      public bool closeTime;
      public bool profit;
      public bool swapValue;
      public bool commission;
      public bool stopLoss;
      public bool takeProfit;
      public bool expiration;
      public bool comment;
      public bool symbol;
      public bool parameters;
    }

    public Order() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Ticket = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                Type = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Magic = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Lots = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                OpenPrice = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                ClosePrice = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                OpenTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                CloseTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Double) {
                Profit = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Double) {
                SwapValue = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                Commission = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                StopLoss = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Double) {
                TakeProfit = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                Expiration = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                Comment = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                Symbol = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<ExpertParameter>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    ExpertParameter _elem2;
                    _elem2 = new ExpertParameter();
                    _elem2.Read(iprot);
                    Parameters.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Order");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ticket) {
          field.Name = "ticket";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ticket);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.magic) {
          field.Name = "magic";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Magic);
          oprot.WriteFieldEnd();
        }
        if (__isset.lots) {
          field.Name = "lots";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Lots);
          oprot.WriteFieldEnd();
        }
        if (__isset.openPrice) {
          field.Name = "openPrice";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(OpenPrice);
          oprot.WriteFieldEnd();
        }
        if (__isset.closePrice) {
          field.Name = "closePrice";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(ClosePrice);
          oprot.WriteFieldEnd();
        }
        if (OpenTime != null && __isset.openTime) {
          field.Name = "openTime";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpenTime);
          oprot.WriteFieldEnd();
        }
        if (CloseTime != null && __isset.closeTime) {
          field.Name = "closeTime";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloseTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.profit) {
          field.Name = "profit";
          field.Type = TType.Double;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Profit);
          oprot.WriteFieldEnd();
        }
        if (__isset.swapValue) {
          field.Name = "swapValue";
          field.Type = TType.Double;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(SwapValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.commission) {
          field.Name = "commission";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Commission);
          oprot.WriteFieldEnd();
        }
        if (__isset.stopLoss) {
          field.Name = "stopLoss";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(StopLoss);
          oprot.WriteFieldEnd();
        }
        if (__isset.takeProfit) {
          field.Name = "takeProfit";
          field.Type = TType.Double;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(TakeProfit);
          oprot.WriteFieldEnd();
        }
        if (Expiration != null && __isset.expiration) {
          field.Name = "expiration";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Expiration);
          oprot.WriteFieldEnd();
        }
        if (Comment != null && __isset.comment) {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Comment);
          oprot.WriteFieldEnd();
        }
        if (Symbol != null && __isset.symbol) {
          field.Name = "symbol";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Symbol);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (ExpertParameter _iter3 in Parameters)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Order(");
      bool __first = true;
      if (__isset.ticket) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ticket: ");
        __sb.Append(Ticket);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.magic) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Magic: ");
        __sb.Append(Magic);
      }
      if (__isset.lots) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Lots: ");
        __sb.Append(Lots);
      }
      if (__isset.openPrice) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpenPrice: ");
        __sb.Append(OpenPrice);
      }
      if (__isset.closePrice) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClosePrice: ");
        __sb.Append(ClosePrice);
      }
      if (OpenTime != null && __isset.openTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpenTime: ");
        __sb.Append(OpenTime);
      }
      if (CloseTime != null && __isset.closeTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloseTime: ");
        __sb.Append(CloseTime);
      }
      if (__isset.profit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Profit: ");
        __sb.Append(Profit);
      }
      if (__isset.swapValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SwapValue: ");
        __sb.Append(SwapValue);
      }
      if (__isset.commission) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Commission: ");
        __sb.Append(Commission);
      }
      if (__isset.stopLoss) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StopLoss: ");
        __sb.Append(StopLoss);
      }
      if (__isset.takeProfit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TakeProfit: ");
        __sb.Append(TakeProfit);
      }
      if (Expiration != null && __isset.expiration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Expiration: ");
        __sb.Append(Expiration);
      }
      if (Comment != null && __isset.comment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Comment: ");
        __sb.Append(Comment);
      }
      if (Symbol != null && __isset.symbol) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Symbol: ");
        __sb.Append(Symbol);
      }
      if (Parameters != null && __isset.parameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Parameters: ");
        __sb.Append(Parameters);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
